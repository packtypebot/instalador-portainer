#!/bin/bash

# Verifica par칙metros
if [ "$#" -ne 3 ]; then
    echo "Erro: Necess치rio informar todos os par칙metros"
    echo "Uso: $0 <traefik_domain> <portainer_domain> <email>"
    exit 1
fi

# Armazena par칙metros
TRAEFIK="$1"
PORTAINER="$2"
EMAIL="$3"

# Decodifica e executa
ENCODED=""
DECODED=$(echo "$ENCODED" | base64 -d)
eval "$DECODED"